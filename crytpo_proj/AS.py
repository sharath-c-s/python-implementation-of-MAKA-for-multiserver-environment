import importlib, importlib.util
import hashlib
import secrets
import string
import sqlite3
import random
from datetime import datetime

def module_from_file(module_name, file_path):
    spec = importlib.util.spec_from_file_location(module_name, file_path)
    module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(module)
    return module
mc = module_from_file("RC", "./RC.py")
rc = mc.class_RC()

class class_AS:
    #function to create a server
    def create_server(self):
        #SID generated by server
        now = datetime.now()
        t1 = datetime.timestamp(now)
        self.SIDa = ''.join(secrets.choice(string.ascii_uppercase + string.digits + string.ascii_lowercase)
                                                  for i in range(8))
        
        (Ks, h_ask, P) = rc.on_AS(self.SIDa)
        now = datetime.now()
        t2 = datetime.timestamp(now)
        print('time to create server:   ', t2-t1)

    #phase1 of muttual authentication
    def M1(self, B_us, D_us, alpha, SIDa):
        print("M1 auth")
        self.alpha = alpha
        self.SIDa = SIDa
        USK = rc.USK
        PIDu = int(B_us, 16) ^ int(self.hash_sha(SIDa + alpha + self.hash_sha(USK)), 16)
        PIDu = '{:x}'.format(PIDu)
        #print('PIDu:   ',PIDu)
        conn = sqlite3.connect('database.sqlite')
        cursor=conn.cursor()
        cursor.execute('select Ks from ts where SIDa = ?', (self.SIDa,))
        Ks = cursor.fetchone()
        Ks = Ks[0]
        conn.close()
        self.Qs = self.hash_sha(PIDu + Ks)
        D_us__ = self.hash_sha(PIDu + self.Qs + alpha)
        if D_us == D_us__:
            N2 = str(random.randint(1,17))
            self.beta =str(rc.P[0]*int(N2))+" "+str(rc.P[1]*int(N2))
            al_list = alpha.split()
            K_su =str(int(al_list[0])*int(N2))+str(int(al_list[1])*int(N2))
            self.SK = self.hash_sha(self.Qs + K_su + PIDu)
            print('session key generated by server is:   ', self.SK)
            E_su = self.hash_sha(self.SK + SIDa + self.beta + alpha + self.Qs)
            return E_su, self.beta
        else:
            print('wrong D_us')
            return E_su, self.beta

    def M3(self, F_us):
        print("M3 auth")
        F_us__ = self.hash_sha(self.SIDa + self.alpha+ self.beta + self.SK +self.Qs)
        print('F_us__:   ',F_us__)
        if(F_us==F_us__):
            print("AUTHENTICATION SUCCESFUL, SERVER AVAILABLE FOR SERVICES")
            return 1
        else :
            print("AUTHENTICATION FAILED")
            return 0
        
    
    def hash_sha(self,s):
        h = hashlib.sha256(s.encode())
        return h.hexdigest()



'''

x = class_AS()
x.create_server()
'''
